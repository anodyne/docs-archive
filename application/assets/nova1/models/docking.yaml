wiki:
  get:
    -
      method: get_docked_item()
      status: active
      scope: public
      description: Get a specific docked item.
      return: The method will return an object with the docked item information or <kbd>FALSE</kbd> if there is no item with that ID.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric item ID to pull information for
    -
      method: get_docked_items()
      status: active
      scope: public
      description: Get all the docked items.
      return: The method will return an object with the docked items.
    -
      method: get_docking_data()
      status: active
      scope: public
      description: Get the data associated with a specific item and field.
      return: The method will return an object with the docked item field data or <kbd>FALSE</kbd> if there is no data for that docked item field.
      parameters:
        -
          name: item
          default: None
          options: None
          type: integer
          notes: A numeric docked item ID to pull information for
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric field ID to pull information for
    -
      method: get_docking_field_details()
      status: active
      scope: public
      description: Get all the information about a specific field based on the ID of the field.
      return: The method will return an object with the field information.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: The numeric ID of the field
    -
      method: get_docking_fields()
      status: active
      scope: public
      description: Get all the fields. Using the parameters, this can be narrowed down further to just be fields from a section.
      return: The method will return an object with the information for the fields being requested.
      parameters:
        -
          name: section
          default: None
          options: None
          type: integer
          notes: What section to pull fields for
        -
          name: type
          default: None
          options: text, textarea, select
          type: string
          notes: The type of fields to pull
    -
      method: get_docking_section_details()
      status: active
      scope: public
      description: Get all information about a section.
      return: The method will return an object with the information for the section being requested.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section ID being pulled
    -
      method: get_docking_sections()
      status: active
      scope: public
      description: Get all the specification sections.
      return: The method will return an object with the information for the specification sections.
    -
      method: get_docking_value_details()
      status: active
      scope: public
      description: Get all information about a field value.
      return: The method will return an object with the information for the field value being requested.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the value ID being pulled
    -
      method: get_docking_values()
      status: active
      scope: public
      description: Get all of the values for a specific field.
      return: The method will return an object with the information for all the values related to the field being requested.
      parameters:
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric ID for the field ID values are being pulled for
    -
      method: get_field_data()
      status: active
      scope: public
      description: Get field data for display.
      return: The method will return an object with the data of the field requested.
      parameters:
        -
          name: field
          default: None
          options: None
          type: integer
          notes: The numeric ID of the field whose data is being retrieved
        -
          name: item
          default: None
          options: None
          type: integer
          notes: The numeric ID of the item whose data is being retrieved

  update:
    -
      method: update_docking_data()
      status: active
      scope: public
      description: Update the data associated with a specific field.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the field to update
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric ID for the docked item to update
    -
      method: update_docking_field()
      status: active
      scope: public
      description: Update a specific field.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the field to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_docking_field_value()
      status: active
      scope: public
      description: Update a specific field value.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the value to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_docking_record()
      status: active
      scope: public
      description: Update a specific docked item.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section to update
    -
      method: update_docking_section()
      status: active
      scope: public
      description: Update a specific section.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_field_sections()
      status: active
      scope: public
      description: Update a specific field section.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: old ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section ID
        -
          name: new ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section ID

  create:
    -
      method: add_docking_field()
      status: active
      scope: public
      description: Add a field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_field_data()
      status: active
      scope: public
      description: Add data related to a specific field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_field_value()
      status: active
      scope: public
      description: Add a field value related to a specific field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_section()
      status: active
      scope: public
      description: Add a section to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: insert_docking_data()
      status: active
      scope: public
      description: Add some docking data to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: insert_docking_record()
      status: active
      scope: public
      description: Add a docked item record to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record

  delete:
    -
      method: delete_docked_item()
      status: active
      scope: public
      description: Delete a docked item from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the item to be removed
    -
      method: delete_docking_field()
      status: active
      scope: public
      description: Delete a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the field to be removed
    -
      method: delete_docking_field_data()
      status: active
      scope: public
      description: Remove data associated with a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric ID of the field whose data should be removed
    -
      method: delete_docking_field_value()
      status: active
      scope: public
      description: Delete a field value associated with a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the value to be removed
    -
      method: delete_docking_section()
      status: active
      scope: public
      description: Delete a section from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the section to be removed

  count:
    -
      method: count_docked_items()
      status: active
      scope: public
      description: Count all the docked items in the database.
      return: The method will return a count of all the items found.
      parameters:
        -
          name: status
          default: None
          options: active, inactive, pending
          type: string
          notes: The type of docked items to count; use an empty string to count all items