wiki:
  get:
    -
      method: get_all_contributors()
      status: active
      scope: public
      description: Get all contributors for a specific page.
      return: The method will return an array with the player IDs of anyone who has ever contributed to a page. Returns <kbd>FALSE</kbd> if there is no page with that ID.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric page ID to pull contributors for
    -
      method: get_categories()
      status: active
      scope: public
      description: Get all the wiki categories.
      return: The method will return an object with the wiki categories.
    -
      method: get_category()
      status: active
      scope: public
      description: Get a specific category from the database based on its ID.
      return: If a single value is passed in the second parameter, the method will return just that value. If an array if passed to the second parameter, the method will return an array with the values.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric category ID to pull information for
        -
          name: return
          default: None
          options: None
          type: array/string
          notes: A string or array with the values to pull back
    -
      method: get_comment()
      status: active
      scope: public
      description: Get a specific comment from the database based on its ID.
      return: If a single value is passed in the second parameter, the method will return just that value. If an array if passed to the second parameter, the method will return an array with the values.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric comment ID to pull information for
        -
          name: return
          default: None
          options: None
          type: array/string
          notes: A string or array with the values to pull back
    -
      method: get_comments()
      status: active
      scope: public
      description: Get all comments for a specific page.
      return: The method will return an object with the wiki page comments.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric page ID to pull comments for
        -
          name: return
          default: activated
          options: activated, pending, none
          type: string
          notes: The status flag to pull; an empty string will pull all comments regardless of status
    -
      method: get_draft()
      status: active
      scope: public
      description: Grabs a specific draft of the given page.
      return: The method will return an object with the requested draft for the page.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric wiki page ID
    -
      method: get_drafts()
      status: active
      scope: public
      description: Grabs all drafts of the given page.
      return: The method will return an object with all the drafts for the page.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric wiki page ID
    -
      method: get_page()
      status: active
      scope: public
      description: Grabs the given page and its latest draft from the wiki tables.
      return: The method will return an object with the wiki page and draft information.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric wiki page ID
    -
      method: get_pages()
      status: active
      scope: public
      description: Grabs all pages and the title of the latest draft from the wiki tables.
      return: The method will return an object with the wiki page and draft information.
      parameters:
        -
          name: category
          default: None
          options: None
          type: integer
          notes: A numeric wiki category ID
        -
          name: order
          default: wiki_drafts.draft_title
          options: None
          type: string
          notes: The field with which to order the results
        -
          name: sort
          default: asc
          options: asc, desc
          type: string
          notes: The direction to sort the results
    -
      method: get_recently_created()
      status: active
      scope: public
      description: Grabs a list of pages ordered by when they were created.
      return: The method will return an object with the wiki pages ordered by their creation date from most recent down.
      parameters:
        -
          name: limit
          default: 10
          options: None
          type: integer
          notes: How many items to show; zero will show all items
    -
      method: get_recently_updated()
      status: active
      scope: public
      description: Grabs a list of pages ordered by when they were last updated.
      return: The method will return an object with the wiki pages ordered by their update date from most recent down.
      parameters:
        -
          name: limit
          default: 10
          options: None
          type: integer
          notes: How many items to show; zero will show all items

  update:
    -
      method: update_category()
      status: active
      scope: public
      description: Update a category in the database.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the category to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_comment()
      status: active
      scope: public
      description: Update a comment in the database.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the comment to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_page()
      status: active
      scope: public
      description: Update a wiki page in the database.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the page to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record

  create:
    -
      method: create_category()
      status: active
      scope: public
      description: Add a category to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: create_comment()
      status: active
      scope: public
      description: Add a comment to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: create_draft()
      status: active
      scope: public
      description: Add a draft to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: create_page()
      status: active
      scope: public
      description: Add a page to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record

  delete:
    -
      method: delete_category()
      status: active
      scope: public
      description: Delete a category from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the category to delete
    -
      method: delete_comment()
      status: active
      scope: public
      description: Delete a wiki page comment from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the comment to be deleted or a numeric page ID of the comments to be deleted
        -
          name: type
          default: comment
          options: comment, page
          type: string
          notes: The type of item to remove
    -
      method: delete_draft()
      status: active
      scope: public
      description: Delete a draft (or multiple drafts) from the database.
      return: The method returns the number of affected rows returned by the query.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the draft to be deleted, a numeric page ID of the drafts to be deleted or an array of IDs to be deleted
        -
          name: type
          default: draft
          options: draft, page, array_draft, array_page
          type: string
          notes: The type of item we're removing
    -
      method: delete_page()
      status: active
      scope: public
      description: Delete a page from the database. <span class="red"><strong>Warning:</strong> to avoid leaving orphan records, this method will delete all drafts and comments associated with the page ID passed in to the method. Use this with great caution!</span>
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the page to delete

  count:
    -
      method: count_all_comments()
      status: active
      scope: public
      description: Count all the comments that match the criteria passed to the method.
      return: The method will return a count of all the items found.
      parameters:
        -
          name: status
          default: accepted
          options: accepted, pending
          type: string
          notes: The type of comments to count; use an empty string to count all comments
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric page ID to use for counting wiki comments

  search:
    -
      method: search_pages()
      status: active
      scope: public
      description: Search through the pages to find the terms passed to the method.
      return: The method will return an object with all the results of the search.
      parameters:
        -
          name: component
          default: None
          options: title, content
          type: string
          notes: Which type of field to search in
        -
          name: input
          default: None
          options: None
          type: string
          notes: The data to search for