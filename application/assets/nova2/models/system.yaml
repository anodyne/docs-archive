system:
  get:
    -
      method: check_install_status()
      status: active
      scope: public
      description: Check whether the system is installed or not.
      return: The method will return <dfn>TRUE</dfn> if the system is install or <kbd>FALSE</kbd> if it is not installed.
    -
      method: get_all_skins()
      status: active
      scope: public
      description: Get all the skins from the system skin catalogue.
      return: The method will return an object with the information for all the skins in the system skin catalogue.
    -
      method: get_all_system_components()
      status: active
      scope: public
      description: Get all system components (plugins/libraries the system uses) stored in the database.
      return: The method will return an object with the information for all the system components.
    -
      method: get_all_system_versions()
      status: active
      scope: public
      description: Get all system versions stored in the database.
      return: The method will return an object with the information for all the system versions.
    -
      method: get_ban()
      status: active
      scope: public
      description: Get a specific ban from the database.
      return: If a single value is passed in the second parameter, the method will return just that value. If an array if passed to the second parameter, the method will return an array with the values.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID to pull values for
        -
          name: return
          default: None
          options: None
          type: array/string
          notes: The values to pull back
    -
      method: get_bans()
      status: active
      scope: public
      description: Get the ban items from the database.
      return: The method will return either an object with the dataset or an array of IP addresses if FALSE is passed to the second parameter.
      parameters:
        -
          name: level
          default: None
          options: None
          type: integer
          notes: The level of bans to retrieve; leave empty for all bans
        -
          name: return all
          default: TRUE
          options: TRUE/FALSE
          type: boolean
          notes: Whether to return all the data or just the IP address
    -
      method: get_current_version()
      status: active
      scope: public
      description: Get the current version of the system.
      return: The method will return a string with the complete version number (x.y.z) from the database. <strong>Note:</strong> the database version can be different from the file version!
    -
      method: get_database_size()
      status: active
      scope: public
      description: Attempts to calculate the size of the database.
      return: The method will return an integer representing the size of the database in bytes.
    -
      method: get_item()
      status: active
      scope: public
      description: Get an item from any database table based on the parameters passed to the method.
      return: If a single value is passed in the fourth parameter, the method will return just that value. If an array if passed to the fourth parameter, the method will return an array with the values.
      parameters:
        -
          name: table
          default: None
          options: None
          type: string
          notes: The table (minus the prefix) to be pulled from
        -
          name: key
          default: None
          options: None
          type: string
          notes: The table field to use for a simple where clause
        -
          name: ID
          default: None
          options: None
          type: string
          notes: The value to use for a simple where clause
        -
          name: return
          default: None
          options: None
          type: string/array
          notes: The data to return
    -
      method: get_last_login_attempt()
      status: active
      scope: public
      description: Get the last login attempt by a given user.
      return: The method will return an object with all the information about the last login attempt a user made.
      parameters:
        -
          name: data
          default: None
          options: None
          type: string
          notes: The data to be used in determining what information should be pulled
        -
          name: field
          default: login_email
          options: None
          type: string
          notes: The field to use when looking for the records
    -
      method: get_loa_records()
      status: active
      scope: public
      description: Get all the LOA records from the database.
      return: The method will return an object with all the information about LOA records.
      parameters:
        -
          name: limit
          default: 0
          options: None
          type: integer
          notes: How many records to limit the result set to; use an empty string to return all records
        -
          name: offset
          default: 0
          options: None
          type: integer
          notes: Where to begin pulling data in the result set
    -
      method: get_nova_uid()
      status: active
      scope: public
      description: Get the Nova installation unique ID from the database.
      return: The method will return a string with the Nova UID.
    -
      method: get_preferences()
      status: active
      scope: public
      description: Get the available user preferences stored in the system.
      return: The method will return an object with information about all of the user preferences stored in the database.
    -
      method: get_security_questions()
      status: active
      scope: public
      description: Get the available security questions stored in the system.
      return: The method will return an object with information about all of the security questions stored in the database.
    -
      method: get_sim_types()
      status: active
      scope: public
      description: Get the sim types stored in the system.
      return: The method will return an object with information about all of the sim types stored in the database.
    -
      method: get_skinsec_default()
      status: active
      scope: public
      description: Get a skin section default value from the system skin catalogue.
      return: The method will return a string with the skin location or <kbd>FALSE</kbd> if no default exists.
      parameters:
        -
          name: section
          default: None
          options: main, admin, wiki, login
          type: string
          notes: The section to get the default for
    -
      method: <span class="label success">NEW</span> get_skin_by_section()
      status: active
      scope: public
      description: Get skins for a specific section.
      return: The method will return an object with the skin information or <kbd>FALSE</kbd> if no skin exists.
      parameters:
        -
          name: section
          default: None
          options: None
          type: string
          notes: The section to pull skins for
    -
      method: get_skin_info()
      status: active
      scope: public
      description: Get information about a specific skin.
      return: The method will return an object with the skin information or <kbd>FALSE</kbd> if no skin exists.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: string
          notes: The skin to pull
        -
          name: field
          default: skin_location
          options: None
          type: string
          notes: The database field to use in identifying the ID
    -
      method: get_skin_name()
      status: active
      scope: public
      description: Get the full name for a specific skin.
      return: The method will return a string with the skin name or <kbd>FALSE</kbd> if no skin exists.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the skin to pull
    -
      method: get_skin_section_info()
      status: active
      scope: public
      description: Get information for a specific skin section.
      return: The method will return an object with the skin section information.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: string
          notes: Specifies which item should be pulled based on the field
        -
          name: field
          default: skinsec_section
          options: None
          type: string
          notes: Which field to use in pulling the information
    -
      method: get_skin_sections()
      status: active
      scope: public
      description: Get a list of all the sections associated with a skin.
      return: The method will return an object with the skin sections.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: string
          notes: The skin location (folder name) of the skin to pull sections for
        -
          name: status
          default: active
          options: active, inactive, development, none
          type: string
          notes: The status of the skin sections to pull
    -
      method: get_skinsec()
      status: active
      scope: public
      description: Get a list of skin sections.
      return: The method will return an object with the skin sections.
      parameters:
        -
          name: where
          default: None
          options: None
          type: array
          notes: An array of key/value pairs to be used in building a where statement
    -
      method: get_system_info()
      status: active
      scope: public
      description: Get the information about the system.
      return: The method will return an object with the system information or <kbd>FALSE</kbd> if nothing can be found.
    -
      method: get_uploaded_images()
      status: active
      scope: public
      description: Get a list of skin sections.
      return: The method will return an object with the skin sections.
      parameters:
        -
          name: type
          default: None
          options: bio, award, mission, tour
          type: string
          notes: The type of uploaded images to pull
    -
      method: <span class="label success">NEW</span> list_table_columns()
      status: active
      scope: public
      description: Get a list of table columns. While CodeIgniter's Database driver is capable of doing this, there's currently no way to strip the table prefix out so we can use the sms_ prefix instead without creating a whole new database connection group.
      return: The method will return an array table columns.
      parameters:
        -
          name: table
          default: None
          options: None
          type: string
          notes: The table to pull columns for
        -
          name: like
          default: "FALSE"
          options: None
          type: string
          notes: Any LIKE statement used to pull the columns
        -
          name: prefix
          default: "FALSE"
          options: TRUE/FALSE
          type: boolean
          notes: Whether to prepend the table name with the database prefix

  update:
    -
      method: update_database_charset()
      status: active
      scope: public
      description: Update the database to use the character set and collation specified in the database config file. <strong>Note:</strong> this method is specific to MySQL and MySQLi and cannot be used on other database platforms at this time.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
    -
      method: update_my_links()
      status: active
      scope: public
      description: Update the My Links section for a user or all users.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn> unless the query is run for all users.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the user to update
        -
          name: status
          default: active
          options: active, inactive, pending, npc
          type: string
          notes: The status to update the my links field for
        -
          name: items
          default: 75
          options: None
          type: string
          notes: The menu IDs to use for updating all users
    -
      method: update_sim_type()
      status: active
      scope: public
      description: Update a specific sim type.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the sim type to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for updating the record
    -
      method: update_skin()
      status: active
      scope: public
      description: Update a specific skin.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the skin to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for updating the record
    -
      method: update_skin_section()
      status: active
      scope: public
      description: Update a specific skin section.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the skin to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for updating the record
        -
          name: where
          default: None
          options: None
          type: array
          notes: An array with key/value pairs for building a where statement
    -
      method: update_system_info()
      status: active
      scope: public
      description: Update the system information.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for updating the record

  create:
    -
      method: add_ban()
      status: active
      scope: public
      description: Insert a ban record to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_login_attempt()
      status: active
      scope: public
      description: Insert a login attempt record to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_sim_type()
      status: active
      scope: public
      description: Add a sim type to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_skin()
      status: active
      scope: public
      description: Add a skin to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_skin_section()
      status: active
      scope: public
      description: Add a skin section to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_system_version()
      status: active
      scope: public
      description: Add a system version to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record
    -
      method: add_upload_record()
      status: active
      scope: public
      description: Add an upload record to the database.
      return: The method returns the number of affected rows returned by the query. In a successful insertion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use for creating the record

  delete:
    -
      method: delete_ban()
      status: active
      scope: public
      description: Delete a ban record from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the ban record to remove
    -
      method: delete_login_attempts()
      status: active
      scope: public
      description: Delete all login attempts by a given email address.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: email
          default: None
          options: None
          type: string
          notes: The email address to use for removing login attempts
    -
      method: delete_sim_type()
      status: active
      scope: public
      description: Delete a sim type from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the sim type to remove
    -
      method: delete_skin()
      status: active
      scope: public
      description: Delete a skin from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the skin to remove
    -
      method: <span class="label warning">UPDATED</span> delete_skin_section()
      status: active
      scope: public
      description: Delete a skin section from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the skin section to remove
        -
          name: identifier
          default: skinsec_id
          options: None
          type: string
          notes: The column to use as the identifier
    -
      method: delete_upload_record()
      status: active
      scope: public
      description: Delete an upload record from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the upload record to remove

  count:
    -
      method: count_loa_records()
      status: active
      scope: public
      description: Counts all LOA records in the database.
      return: The method returns a count of all database records.
    -
      method: count_login_attempts()
      status: active
      scope: public
      description: Counts all login attempts by a given user.
      return: The method returns a count of all database records for a given user.
      parameters:
        -
          name: email
          default: None
          options: None
          type: string
          notes: The email address to use for counting login attempts

  misc:
    -
      method: optimize_table()
      status: active
      scope: public
      description: Optimize a database table. <strong>Note:</strong> this only works with MySQL and MySQLi. Other database platforms do not have optimization methods like this.
      return: The method returns <dfn>TRUE</dfn> if the optimization was successful and <kbd>FALSE</kbd> if it was not.
      parameters:
        -
          name: table
          default: None
          options: None
          type: string
          notes: The table to optimize