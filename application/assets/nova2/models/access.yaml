docking:
  get:
    -
      method: get_group()
      status: active
      scope: public
      description: Grabs information about a specific role group.
      return: The method will return information based on what was passed to it. If the return value is empty, an object will be returned with all data. If a single value is provided, the return will be the value of that field. Finally, if an array is provided, the return will be an array with the fields specified. If no data is found, the method will return <dfn>FALSE</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric item ID to pull information for
        -
          name: return
          default: None
          options: None
          type: integer
          notes: Which items the method should return. This can be a single string, an array of values or nothing at all
    -
      method: get_page()
      status: active
      scope: public
      description: Grabs information about a specific role page.
      return: The method will return information based on what was passed to it. If the return value is empty, an object will be returned with all data. If a single value is provided, the return will be the value of that field. Finally, if an array is provided, the return will be an array with the fields specified. If no data is found, the method will return <dfn>FALSE</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric item ID to pull information for
        -
          name: return
          default: None
          options: None
          type: integer
          notes: Which items the method should return. This can be a single string, an array of values or nothing at all
    -
      method: get_page_groups()
      status: active
      scope: public
      description: Grabs all of the page groups from the database.
      return: The method returns an object with all the information about all page groups in the database.
    -
      method: get_pages()
      status: active
      scope: public
      description: Goes out to the database with a comma-separated string of page IDs and pulls back their URLs and access levels as an array.
      return: The method will return an array containing page URLs as the keys and access levels as the values.
      parameters:
        -
          name: data
          default: None
          options: None
          type: integer
          notes: A comma-separated list of page IDs (most often from <dfn>get_role_data()</dfn>)
    -
      method: get_players_with_role()
      status: active
      scope: public
      description: Retrieves all players from the database that have the role ID given in the first parameter.
      return: The method will return an array with the main character IDs for all players who have the specified role ID. Returns <dfn>FALSE</dfn> if no data is found.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric role ID
    -
      method: get_role()
      status: active
      scope: public
      description: Grabs all data about a given role.
      return: The method will return the row's query object for use in your pages. Returns <dfn>FALSE</dfn> if no data is found.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric role ID

  update:
    -
      method: update_docking_data()
      status: active
      scope: public
      description: Update the data associated with a specific field.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the field to update
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric ID for the docked item to update
    -
      method: update_docking_field()
      status: active
      scope: public
      description: Update a specific field.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the field to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_docking_field_value()
      status: active
      scope: public
      description: Update a specific field value.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the value to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_docking_record()
      status: active
      scope: public
      description: Update a specific docked item.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section to update
    -
      method: update_docking_section()
      status: active
      scope: public
      description: Update a specific section.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section to update
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data to use in updating the record
    -
      method: update_field_sections()
      status: active
      scope: public
      description: Update a specific field section.
      return: The method returns the number of affected rows returned by the query. In a successful update query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: old ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section ID
        -
          name: new ID
          default: None
          options: None
          type: integer
          notes: A numeric ID for the section ID

  create:
    -
      method: add_docking_field()
      status: active
      scope: public
      description: Add a field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_field_data()
      status: active
      scope: public
      description: Add data related to a specific field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_field_value()
      status: active
      scope: public
      description: Add a field value related to a specific field to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: add_docking_section()
      status: active
      scope: public
      description: Add a section to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: insert_docking_data()
      status: active
      scope: public
      description: Add some docking data to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record
    -
      method: insert_docking_record()
      status: active
      scope: public
      description: Add a docked item record to the database.
      return: The method returns the number of affected rows returned by the query. In a successful creation query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: data
          default: None
          options: None
          type: array/object
          notes: The data used to create the record

  delete:
    -
      method: delete_docked_item()
      status: active
      scope: public
      description: Delete a docked item from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the item to be removed
    -
      method: delete_docking_field()
      status: active
      scope: public
      description: Delete a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the field to be removed
    -
      method: delete_docking_field_data()
      status: active
      scope: public
      description: Remove data associated with a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: field
          default: None
          options: None
          type: integer
          notes: A numeric ID of the field whose data should be removed
    -
      method: delete_docking_field_value()
      status: active
      scope: public
      description: Delete a field value associated with a field from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the value to be removed
    -
      method: delete_docking_section()
      status: active
      scope: public
      description: Delete a section from the database.
      return: The method returns the number of affected rows returned by the query. In a successful deletion query, this should be <dfn>1</dfn>.
      parameters:
        -
          name: ID
          default: None
          options: None
          type: integer
          notes: A numeric ID of the section to be removed

  count:
    -
      method: count_docked_items()
      status: active
      scope: public
      description: Count all the docked items in the database.
      return: The method will return a count of all the items found.
      parameters:
        -
          name: status
          default: None
          options: active, inactive, pending
          type: string
          notes: The type of docked items to count; use an empty string to count all items